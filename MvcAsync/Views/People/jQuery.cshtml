@using MvcAsync.Models
@model string
@{
    ViewBag.Title = "jQuery AJAX";
    var ajaxOptions = new AjaxOptions
    {
        Url = Url.Action("Json"),
        OnSuccess = "processData"
    };

}

@*TODO: Use viewmodel*@

<h2>jQuery AJAX</h2>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>First</th>
            <th>Last</th>
            <th>Role</th>
        </tr>
    </thead>
    <tbody id="tableBody"></tbody>
</table>

@* TODO: Remove Ajax helper
    - This needs tidying up.  Perhaps split out into jQuery with AJAX helpers and pure jQuery?
    *@
@using (Ajax.BeginForm("Json", ajaxOptions))
{
    <div>
        @Html.DropDownList("selectedRole", new SelectList(new[] { "All" }.Concat(Enum.GetNames(typeof(Role)))))
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
}

<div>
    @foreach (string role in Enum.GetNames(typeof(Role)))
    {
        <div class="ajaxLink">
            @Ajax.ActionLink(role, "Json", new { selectedRole = role }, ajaxOptions)
        </div>
    }
</div>

@section Scripts
{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script type="text/javascript">
        function processData(data) {
            var target = $("#tableBody");
            target.empty();
            var tableBody = '';
            for (var i = 0; i < data.length; i++) {
                var person = data[i];
                tableBody = tableBody + "<tr><td>" + person.FirstName + "</td><td>" + person.LastName + "</td><td>" + person.Role + "</td></tr>";
            }
            target.append(tableBody);
        }

        $(function () {
            var req = $.ajax({
                type: "GET",
                url: '@Url.Action("Json")'
            }).success(function (responseData) {
                processData(responseData);
            });
        });
    </script>
}
