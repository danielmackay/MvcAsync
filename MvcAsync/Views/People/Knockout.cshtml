@using MvcAsync.Models
@model string
@{
    ViewBag.Title = "Knockout AJAX";
}

<h2>Knockout AJAX</h2>
<table class="table table-striped table-hover" data-bind="visible: people().length > 0">
    <thead>
        <tr>
            <th>First</th>
            <th>Last</th>
            <th>Role</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: people">
        <tr>
            <td data-bind="text: firstName"></td>
            <td data-bind="text: lastName"></td>
            <td data-bind="text: role"></td>
        </tr>
    </tbody>
</table>

<div>
    @Html.DropDownList("selectedRole", new SelectList(new[] { "All" }.Concat(Enum.GetNames(typeof(Role)))), new { id = "selectedRole" })
    <button id="ajaxbutton" class="btn btn-primary" data-bind="click: submit" data-url="@Url.Action("json")">Submit</button>
</div>

<div>
    @*@foreach (string role in Enum.GetNames(typeof(Role)))
        {
            <div class="ajaxLink">
                @Ajax.ActionLink(role, "Json", new { selectedRole = role }, ajaxOptions)
            </div>
    }*@
</div>

@section Scripts
{
    <script src="~/Scripts/knockout-2.3.0.debug.js"></script>
    <script type="text/javascript">
        // Overall viewmodel for this screen, along with initial state
        function Person(data) {
            this.firstName = ko.observable(data.FirstName);
            this.lastName = ko.observable(data.LastName);
            this.role = ko.observable(data.Role);
        }

        function PeopleViewModel() {
            // Data
            var self = this;
            self.people = ko.observableArray([]);

            // Operations
            self.submit = function () {
                var role = $('#selectedRole').val();
                var data = $('#ajaxbutton').data('url');
                var url = data + '?selectedRole=' + role;
                $.getJSON(url, function (allData) {
                    var mappedPeople = $.map(allData, function (item) { return new Person(item) });
                    self.people(mappedPeople);
                });
            };

            self.init = function () {
                self.submit();
            }

            self.init();
        }

        ko.applyBindings(new PeopleViewModel());
    </script>
}
